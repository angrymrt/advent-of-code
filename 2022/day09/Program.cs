using System.Drawing;
using System.Text;

internal class Knot
{
    public Knot Next { get; set; }
    public Point Position { get; private set; }
    public HashSet<Point> Trail { get; } = new HashSet<Point>();

    public Knot()
    {
        Trail.Add(Position);
    }

    public void ExecuteCommand(char direction, int steps)
    {
        for (int i = 0; i < steps; i++)
        {
            switch (direction)
            {
                case 'U':
                    MoveUp();
                    break;
                case 'D':
                    MoveDown();
                    break;
                case 'L':
                    MoveLeft();
                    break;
                case 'R':
                    MoveRight();
                    break;
            }
        }
    }

    private void MoveLeft()
    {
        MoveTo(new Point(Position.X - 1, Position.Y));
    }

    private void MoveDown()
    {
        MoveTo(new Point(Position.X, Position.Y - 1));
    }

    private void MoveUp()
    {
        MoveTo(new Point(Position.X, Position.Y + 1));
    }

    private void MoveRight()
    {
        MoveTo(new Point(Position.X + 1, Position.Y));
    }

    private void Follow(Knot knot)
    {
        if (KnotsTouch(knot))
        {
            return;
        }
        if (AllignedHorizontally(knot))
        {
            if (knot.Position.X > Position.X)
            {
                MoveRight();
            }
            else
            {
                MoveLeft();
            }
            return;
        }
        if (AllignedVertically(knot))
        {
            if (knot.Position.Y > Position.Y)
            {
                MoveUp();
            }
            else
            {
                MoveDown();
            }
            return;
        }
        MoveTo(GetDiagonalTouching(knot));
    }

    private void MoveTo(Point point)
    {
        Position = point;
        Trail.Add(point);
        if (Next != null)
        {
            Next.Follow(this);
        }
    }

    private Point GetDiagonalTouching(Knot knot)
    {
        return new Point[] {
            new Point(Position.X - 1, Position.Y - 1),
            new Point(Position.X - 1, Position.Y + 1),
            new Point(Position.X + 1, Position.Y - 1),
            new Point(Position.X + 1, Position.Y + 1),
        }.First(x => PointsTouch(knot.Position, x));
    }

    private bool AllignedHorizontally(Knot knot)
    {
        return Position.Y == knot.Position.Y;
    }

    private bool AllignedVertically(Knot knot)
    {
        return Position.X == knot.Position.X;
    }

    private bool KnotsTouch(Knot knot)
    {
        return PointsTouch(Position, knot.Position);
    }
    private bool PointsTouch(Point a, Point b)
    {
        return a.X >= b.X - 1 && a.X <= b.X + 1
            && a.Y >= b.Y - 1 && a.Y <= b.Y + 1;
    }

}

internal static class Printer
{
    public static string Print(Point[] points, int canvasWidth, int canvasHeight, int offsetX, int offsetY)
    {
        var result = new StringBuilder();
        for (int y = canvasHeight - 1; y >= 0; y--)
        {
            result.Append(y.ToString().PadLeft(2));
            for (int x = 0; x < canvasWidth; x++)
            {
                if (points.Any(p => p.X + offsetX == x && p.Y + offsetY == y))
                {
                    result.Append('#');
                }
                else
                {
                    result.Append('.');
                }
            }
            result.AppendLine();
        }
        return result.ToString();
    }
}

internal class Rope
{
    public Knot[] Knots { get; private set; }
    public Knot Head { get; private set; }
    public Knot Tail { get; private set; }

    public Rope(int size = 2)
    {
        Knots = new Knot[size];
        for (var i = 0; i < size; i++)
        {
            Knots[i] = new Knot();
        }
        for (var i = 0; i + 1 < size; i++)
        {
            Knots[i].Next = Knots[i + 1];
        }

        Head = Knots[0];
        Tail = Knots[size - 1];
    }

    public int FollowSeriesOfMotions(string input, bool print = false)
    {
        if (print)
        {
            Console.WriteLine("Initial state:");
            Console.WriteLine(Printer.Print(Knots.Select(x => x.Position).ToArray(), 26, 21, 12, 6)); // 26x21
        }

        var lines = input.Split(Environment.NewLine);
        foreach (var line in lines)
        {
            var direction = line[0];
            var steps = int.Parse(line.Substring(2));
            Head.ExecuteCommand(direction, steps);
            if (print)
            {
                Console.WriteLine($"Command: {direction} {steps}");
                Console.WriteLine(Printer.Print(Knots.Select(x => x.Position).ToArray(), 26, 21, 12, 6)); // 26x21
            }
        }

        if (print)
        {
            Console.WriteLine("Tail trail:");
            Console.WriteLine(Printer.Print(Tail.Trail.ToArray(), 26, 21, 12, 6)); // 26x21
        }
        return Tail.Trail.Count();
    }
}

internal class Program
{
    private static void Main(string[] args)
    {
        Console.WriteLine("Advent of code 2022, day 9");

        var testRope = new Rope();
        var testAnswerPart1 = testRope.FollowSeriesOfMotions(testInput);
        Console.WriteLine($"Test answer part 1: {testAnswerPart1}");

        var rope = new Rope();
        var answerPart1 = rope.FollowSeriesOfMotions(input);
        Console.WriteLine($"Answer part 1: {answerPart1}");

        var testRopePart2 = new Rope(10);
        var testAnswerPart2 = testRopePart2.FollowSeriesOfMotions(testInput2, true);
        Console.WriteLine($"Test answer part 2: {testAnswerPart2}");

        var ropePart2 = new Rope(10);
        var answerPart2 = ropePart2.FollowSeriesOfMotions(input);
        Console.WriteLine($"Answer part 2: {answerPart2}");
    }

    private static string testInput = @"R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2";
    private static string testInput2 = @"R 5
U 8
L 8
D 3
R 17
D 10
L 25
U 20";
    private static string input = @"U 1
L 2
U 2
D 2
L 2
U 1
D 1
U 2
D 1
U 2
D 1
R 2
U 2
L 1
U 2
D 2
R 1
U 1
R 2
L 1
R 2
D 2
R 2
D 2
U 1
R 1
D 2
L 2
D 1
R 2
D 2
R 1
L 2
R 1
L 2
R 1
U 1
D 2
L 1
D 1
R 1
U 1
D 2
L 1
U 1
L 2
R 1
D 2
U 1
L 1
D 1
L 1
R 2
D 1
L 1
R 1
L 2
D 2
U 2
D 1
R 2
U 1
L 1
U 2
L 1
U 2
R 2
U 1
D 1
L 2
R 2
D 2
L 1
D 2
R 2
D 1
L 1
D 2
L 1
R 1
L 1
R 2
U 1
R 1
D 1
R 1
D 2
R 2
D 2
U 1
L 1
D 1
R 1
L 2
D 1
U 2
D 1
R 1
D 2
U 2
D 1
R 1
D 1
R 1
U 2
L 1
U 1
R 1
L 2
R 1
L 1
D 2
L 2
R 1
D 3
L 3
U 1
R 2
U 1
R 2
L 1
D 1
L 3
U 2
L 3
D 1
U 2
L 3
U 1
R 2
L 1
R 1
L 2
D 2
R 3
L 1
U 1
L 1
R 1
U 1
D 3
L 3
D 2
R 2
L 2
D 1
U 2
L 2
U 1
R 3
D 3
L 3
R 2
D 3
L 3
U 1
D 3
L 2
R 2
D 3
R 2
L 1
U 3
D 2
R 2
D 3
U 1
D 3
R 3
D 2
U 1
L 2
D 2
U 2
R 1
L 3
U 2
R 2
U 1
R 2
D 1
R 2
D 3
U 1
L 1
U 2
L 1
D 2
R 1
U 1
D 1
R 3
U 3
R 1
U 1
L 3
D 2
R 2
U 1
R 2
D 2
R 3
L 2
U 2
R 1
L 3
U 2
R 1
D 3
L 2
U 2
R 3
U 3
L 1
R 3
D 3
L 2
R 3
D 2
R 3
U 3
R 1
U 2
D 4
L 3
D 2
L 4
R 2
D 4
L 1
R 3
L 1
D 4
U 4
D 1
R 4
U 2
D 2
R 1
U 2
D 1
L 3
D 2
U 2
L 1
R 3
L 3
U 3
L 2
R 1
D 2
R 3
L 2
D 4
U 2
L 3
R 3
L 3
U 4
D 4
L 1
U 3
R 4
L 4
D 4
U 3
R 4
L 2
D 1
U 1
L 4
D 3
U 3
R 2
D 3
U 4
L 2
R 1
L 2
R 2
U 3
L 1
D 4
U 1
L 4
R 3
L 3
R 2
D 4
U 4
L 4
D 3
R 1
D 3
R 4
L 4
R 2
L 2
D 2
R 2
L 2
U 3
R 3
D 2
R 4
L 1
R 2
U 4
L 2
R 1
U 2
R 3
D 2
U 1
R 4
L 3
U 3
D 4
U 1
L 1
R 1
D 2
R 1
D 1
L 2
D 4
U 4
L 4
U 3
D 4
U 4
D 3
U 3
L 5
U 4
L 4
U 5
D 1
L 5
U 2
D 4
U 5
L 4
U 2
D 4
R 3
L 5
U 2
L 1
U 5
L 4
D 2
U 5
R 3
D 2
U 3
L 3
R 3
D 5
U 4
D 5
U 4
R 1
L 1
U 3
L 3
R 4
L 1
U 2
D 3
U 5
L 3
R 5
D 3
U 4
L 1
U 3
R 2
L 2
U 5
D 3
L 5
D 1
R 3
L 5
R 1
D 2
U 3
D 2
L 4
D 4
R 5
L 5
U 1
L 5
R 3
L 3
U 4
R 3
L 3
R 1
L 2
D 1
U 3
L 5
R 1
L 5
U 3
R 4
U 4
D 3
U 2
L 5
D 3
L 3
R 2
D 2
U 3
D 3
R 2
D 3
L 1
R 1
U 1
L 3
R 2
U 3
R 1
D 5
U 5
L 5
D 2
U 4
D 3
U 3
L 4
D 3
U 2
R 1
D 4
L 3
U 5
D 2
L 5
R 4
D 3
L 4
D 3
R 4
D 5
R 2
L 3
D 5
U 3
R 4
U 6
L 5
D 3
U 4
L 1
U 5
R 5
D 3
U 5
D 5
R 2
D 2
U 4
D 2
U 3
R 6
U 4
L 2
R 2
U 3
L 1
U 5
R 6
L 1
D 5
R 5
D 5
L 2
U 3
L 4
R 2
U 3
L 2
U 2
D 4
L 4
R 5
L 6
D 2
L 4
R 2
D 4
L 1
D 6
R 2
U 5
D 2
L 6
U 5
L 4
U 1
D 3
U 1
L 5
U 2
R 6
D 5
U 4
L 5
U 1
L 5
U 2
R 5
U 2
R 4
D 4
R 1
D 6
R 5
L 5
U 6
D 2
R 1
L 4
U 3
D 6
R 4
L 3
R 6
U 2
R 1
U 4
R 5
U 1
D 4
U 1
L 3
D 2
L 2
D 2
L 2
U 6
D 4
L 5
D 2
U 1
L 5
D 2
R 3
L 2
D 2
U 4
L 4
U 6
L 1
R 7
L 4
U 1
L 1
U 6
L 1
D 2
L 5
R 3
U 6
L 6
U 2
D 4
L 2
R 6
L 3
D 4
L 1
R 6
D 4
U 2
D 4
R 2
D 1
U 3
R 6
U 4
D 2
L 6
R 5
L 3
U 1
L 3
U 3
L 7
R 1
L 4
D 5
U 6
L 3
U 2
L 1
D 2
R 4
D 7
R 1
D 5
L 1
D 2
U 2
R 1
L 1
U 2
D 2
R 4
D 7
L 7
D 1
L 4
R 7
U 3
L 4
R 3
U 2
R 5
U 5
L 5
U 2
L 7
R 4
U 2
L 5
R 4
U 7
L 7
R 5
L 6
D 4
L 1
D 6
L 5
R 5
L 7
R 5
D 4
U 4
L 5
U 7
D 6
U 3
L 5
U 4
D 1
L 1
D 7
R 3
D 7
U 3
D 7
R 4
U 5
L 7
R 4
L 5
R 1
D 4
L 3
U 1
R 3
L 1
U 4
R 3
L 5
D 2
R 2
L 4
D 4
L 7
R 7
U 2
D 7
L 5
U 3
L 4
U 7
R 6
D 3
L 2
R 7
L 5
U 6
D 6
L 2
D 2
L 5
D 7
U 5
L 3
D 4
U 4
L 4
R 2
D 8
L 3
R 2
D 4
L 4
U 7
R 8
D 6
R 7
U 1
R 6
U 6
R 4
D 8
L 3
R 3
D 2
U 5
D 8
L 3
D 5
L 7
R 5
L 1
D 4
L 7
U 7
L 8
D 7
L 5
U 3
R 4
U 3
L 7
R 8
D 6
R 2
D 3
R 1
D 6
U 8
D 6
L 2
R 8
D 4
U 3
D 5
U 2
L 3
U 1
R 7
U 6
D 5
R 5
U 4
L 1
D 3
U 7
L 8
U 5
D 5
U 4
D 3
L 5
D 5
R 5
D 3
R 4
U 4
R 8
L 4
D 4
L 2
D 4
R 7
L 8
R 7
L 1
D 3
U 6
R 5
D 1
U 4
R 7
U 1
R 2
L 8
U 8
D 2
L 9
U 9
D 4
U 8
D 3
R 1
U 3
D 1
R 7
L 2
U 4
L 4
U 9
L 7
U 2
L 4
D 5
R 8
L 5
R 4
U 2
L 5
U 2
D 1
L 9
R 5
D 6
U 3
D 5
U 2
L 1
R 7
U 1
L 7
U 1
L 5
D 6
R 6
D 7
U 6
D 7
L 7
D 2
L 6
D 4
U 7
D 4
L 8
D 5
R 7
L 9
D 9
U 3
D 2
U 9
R 4
D 3
U 9
R 4
D 6
L 2
D 1
L 5
U 2
L 5
D 1
R 7
L 9
R 6
D 8
L 2
R 5
D 6
L 9
U 8
R 2
D 4
R 5
U 3
D 4
R 6
D 5
U 9
D 6
L 3
D 6
R 6
D 5
R 7
U 5
L 2
U 2
D 5
U 4
D 8
R 6
U 8
D 2
R 9
U 6
L 1
U 6
L 5
U 10
D 2
U 6
R 10
L 7
U 4
R 2
D 1
U 3
D 6
L 10
U 4
L 5
D 10
R 1
L 5
R 5
U 6
R 1
D 7
L 7
D 4
L 4
D 10
U 1
R 9
L 7
D 7
L 6
D 7
U 7
R 5
L 6
U 3
L 1
D 4
L 1
D 3
U 10
D 10
L 3
R 6
U 4
D 2
L 4
U 1
R 9
D 8
U 7
R 10
U 10
L 4
U 1
L 9
R 7
L 8
R 10
D 6
U 1
R 1
D 10
R 4
L 6
D 2
U 9
R 6
L 4
U 10
R 10
U 4
D 8
U 8
L 9
R 9
D 7
L 1
D 6
L 7
U 4
L 6
R 9
D 6
L 5
D 5
L 5
U 6
R 1
D 4
R 6
L 5
U 9
R 3
D 3
L 10
D 6
U 5
D 6
R 6
D 7
R 3
D 2
L 2
D 9
U 1
D 1
L 1
D 3
U 3
R 4
U 1
L 9
U 9
R 4
D 10
U 2
L 4
U 3
D 1
R 10
U 7
R 5
D 6
L 2
U 5
L 5
U 5
L 4
D 8
R 7
L 5
R 6
U 4
L 7
D 4
R 9
D 7
R 7
L 2
D 8
L 9
D 2
L 7
U 10
R 3
U 5
R 3
D 9
U 9
D 11
U 6
R 3
U 11
D 11
L 11
U 6
D 10
R 9
U 11
R 6
L 4
R 5
L 11
D 9
L 10
R 4
D 11
R 2
L 6
R 3
U 4
L 10
U 6
D 9
L 5
U 3
R 2
U 5
L 7
U 1
L 10
U 9
R 3
D 5
R 9
U 6
D 9
L 6
R 10
D 10
R 8
D 7
L 3
D 4
L 6
R 2
D 11
U 5
D 7
L 1
U 11
L 11
U 3
D 2
L 9
R 8
L 11
R 2
D 9
U 3
L 9
U 6
D 2
L 10
U 8
L 5
R 3
U 3
R 1
L 7
R 10
L 2
R 7
U 5
D 12
L 11
R 2
L 10
U 2
D 3
R 3
U 6
D 1
L 8
R 4
L 5
U 10
R 12
U 9
R 12
L 12
R 6
U 11
D 1
R 9
U 2
R 11
L 1
R 12
U 10
L 9
U 12
R 10
U 12
D 12
U 2
D 11
L 12
R 9
U 3
D 4
L 6
U 3
R 10
D 2
U 11
L 4
R 11
U 11
R 1
D 10
R 6
U 8
L 3
D 6
R 1
U 9
L 3
U 5
D 4
R 12
U 11
D 2
U 10
L 4
D 9
L 4
U 10
D 1
R 1
L 5
R 2
D 12
R 5
U 3
L 11
D 10
L 11
R 7
L 10
U 6
R 12
D 3
R 10
U 1
L 2
D 1
R 1
L 12
U 4
L 3
R 6
L 3
D 6
U 7
R 10
U 6
D 6
R 5
D 10
R 10
D 8
L 10
U 11
R 9
L 4
R 8
U 1
D 3
U 7
L 3
U 10
R 12
U 10
D 10
U 9
D 7
R 4
D 2
R 9
U 13
R 6
L 4
R 9
L 11
U 6
L 12
D 9
R 13
L 2
U 7
D 10
L 13
D 4
U 6
L 8
U 13
R 3
D 2
L 3
R 1
U 1
D 7
L 5
D 6
R 1
D 3
R 5
L 1
D 3
U 11
L 1
D 13
R 5
D 2
L 8
D 10
R 1
L 2
D 2
L 12
R 11
D 13
R 7
D 12
L 2
D 5
L 9
D 8
L 3
D 2
U 4
D 8
R 7
D 8
U 8
R 2
U 10
D 7
L 9
U 1
L 10
R 4
U 1
L 5
R 5
D 10
R 2
L 6
R 4
D 10
L 7
R 11
L 11
U 7
L 1
D 5
U 4
D 6
R 4
U 6
D 7
L 2
D 1
R 11
U 11
D 12
U 4
D 13
R 3
L 4
R 3
L 8
R 4
U 7
L 2
R 8
L 13
D 6
U 11
L 12
U 1
D 3
U 7
L 4
R 5
U 7
D 1
L 9
U 2
R 4
D 9
U 8
R 2
D 9
L 8
D 13
U 13
D 1
U 9
D 5
L 1
U 12
D 2
R 9
L 7
R 1
L 3
R 2
D 12
L 11
D 4
R 11
U 5
L 13
R 2
U 12
L 9
R 10
U 3
D 10
R 8
D 12
U 6
R 7
D 11
L 10
U 14
L 9
U 12
D 4
U 3
D 10
R 6
D 5
R 1
D 10
U 13
L 9
R 7
U 14
D 10
U 7
D 13
L 14
D 14
U 6
D 14
L 8
R 2
D 7
U 14
R 6
L 14
U 14
R 6
D 7
R 7
D 3
U 10
D 10
R 7
U 11
R 3
L 2
R 12
L 13
R 3
U 4
D 1
L 7
U 9
R 9
U 9
L 11
U 7
D 6
R 7
L 3
D 5
U 14
R 8
D 7
L 6
U 6
R 11
D 9
R 6
D 5
L 5
D 1
L 10
R 8
L 15
U 1
D 14
L 1
R 5
D 5
L 3
U 6
R 6
L 4
D 3
L 3
D 4
U 7
L 10
D 8
R 13
D 9
R 15
D 6
U 10
D 14
L 10
U 12
D 13
U 8
L 13
U 11
D 13
L 8
R 12
U 12
D 14
U 15
L 1
R 14
U 15
L 14
U 4
D 2
L 2
R 6
D 15
U 2
R 5
L 7
U 8
D 12
R 2
U 2
R 11
L 3
U 15
R 15
D 1
U 9
R 5
U 1
R 15
U 7
D 8
R 6
U 7
R 1
U 5
R 15
U 9
L 6
U 10
R 10
D 2
U 14
D 13
R 11
L 14
D 6
U 6
D 6
U 10
D 1
U 10
L 11
D 13
U 2
L 14
D 9
R 14
U 9
L 8
D 11
U 3
L 5
U 8
L 1
U 12
L 6
R 5
D 8
R 5
D 9
U 14
R 13
U 6
L 9
R 7
L 5
U 9
L 8
D 9
L 3
R 4
L 8
D 1
L 4
R 6
U 8
L 5
R 12
U 7
R 5
D 8
U 6
R 11
U 1
D 9
L 7
R 10
L 4
R 1
D 11
R 1
U 16
L 6
R 7
D 3
R 4
U 13
R 12
D 1
L 5
D 2
U 4
D 11
L 13
D 4
U 2
D 14
L 3
U 1
D 13
R 14
U 6
R 8
L 16
U 9
D 7
U 15
D 15
L 11
R 15
L 4
D 5
U 3
L 3
D 8
L 6
U 15
L 11
R 14
D 8
U 10
D 6
R 1
L 16
D 16
L 3
U 10
R 5
L 16
R 2
U 15
R 10
U 11
R 15
D 16
L 3
U 15
L 10
R 12
U 13
R 3
L 13
D 15
U 4
R 8
U 6
L 10
R 12
U 1
L 15
D 5
L 1
U 9
D 1
R 16
L 7
U 13
L 13
U 6
L 1
R 14
L 11
U 16
R 15
L 10
D 9
R 9
D 6
U 16
R 4
U 1
L 3
R 16
L 3
U 6
D 15
R 13
D 11
U 15
R 3
L 15
D 14
U 10
R 7
U 4
R 13
L 11
R 13
L 11
R 3
L 5
U 12
L 9
U 8
D 2
U 17
D 3
R 17
U 14
L 9
R 10
D 6
L 5
R 14
L 8
U 2
D 16
R 15
D 12
U 3
L 4
R 12
U 16
D 14
L 12
R 8
D 4
R 9
U 12
R 15
U 6
L 3
D 17
R 3
U 6
L 2
R 2
U 2
D 17
L 4
R 8
U 17
R 16
L 17
U 5
D 11
U 8
L 7
U 3
R 1
D 15
U 14
L 4
D 9
U 15
R 13
L 2
U 4
R 17
U 2
L 13
R 4
U 8
R 15
U 8
D 13
U 10
D 7
U 7
D 17
R 16
L 10
U 10
L 8
R 9
L 8
R 1
D 10
U 17
D 13
U 10
D 13
L 14
R 17
D 5
L 1
U 17
D 17
L 13
U 12
R 10
D 12
R 15
L 15
U 11
L 14
D 15
U 12
D 7
U 15
L 1
U 2
R 18
L 15
U 7
L 8
R 3
D 14
R 7
D 7
U 6
R 10
L 9
R 9
D 17
R 11
D 4
L 16
U 12
R 10
L 4
D 7
U 18
L 11
U 3
L 13
U 5
R 11
D 16
U 14
D 1
R 18
D 4
L 7
U 2
D 9
L 5
R 14
U 18
R 2
U 7
R 8
U 9
L 6
R 12
U 15
R 1
L 7
D 3
U 10
R 5
U 2
L 8
R 13
L 14
D 10
L 10
U 12
R 5
L 13
D 8
U 5
D 17
L 8
D 8
L 7
U 5
D 16
R 9
D 6
U 11
D 16
U 15
D 6
L 4
R 16
D 8
L 11
U 13
R 14
L 12
D 2
U 16
D 1
L 12
D 10
R 1
D 17
L 8
U 13
R 10
U 9
D 4
R 1
U 17
L 5
D 15
U 9
R 15
U 18
L 15
D 18
U 15
D 1
L 9
R 6
L 15
R 3
D 19
L 5
D 10
L 18
D 11
L 14
D 11
U 19
D 5
R 9
L 18
R 11
D 3
L 7
R 4
D 13
L 9
R 14
D 14
L 8
U 10
L 11
U 4
D 13
R 13
L 7
R 7
D 18
U 2
L 17
D 16
R 3
U 12
L 13
U 5
L 1
U 9
R 6
D 14
U 6
R 3
U 6
R 7
D 8
U 11
L 11
R 7
U 17
D 2
L 12
U 18
L 3
U 14
L 6
R 10
L 16
U 19
D 9
R 13
U 5
R 5
D 15
R 1
L 1
U 5
D 16
L 5
R 15
L 14
D 5
R 9
U 12
L 9
U 7
R 16
D 16
R 10
D 15
R 16
L 2
U 13
L 5
D 19
R 18
D 19
R 16
D 12
R 15
D 12
U 5
L 3
R 14
D 7
U 11
R 10
L 18
D 9
U 2
D 19
U 8
D 19
U 18
R 11
D 2
R 8
D 14";
}