using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace _2020
{
    class Calculator {
        private Stack<char> stack { get; } = new Stack<char>();
        private Regex parenthesesRegex = new Regex(@"[(](.*)[)]");
        private Regex numberRegex = new Regex(@"\d");
        private Regex operationRegex = new Regex(@"[*+]");

        public long Compute(string input) {
            var result = 0L;

            

            var operation = ' ';
            var parenthesesMatch = parenthesesRegex.Match(input);
            var parts = input.Split(' ').ToList();
            var partIndex = 0;

            for(var i = 0; i < parts.Count(); i++) {
                var part = parts[i];
                if(part.StartsWith('(')) {
                    var inParentheses = GetPartInParentheses(i, parts);
                    result = Compute(result, operation, Compute(inParentheses.Result));
                    // skip forward..
                    partIndex = inParentheses.PartIndex;
                    i = inParentheses.PartsIndex;
                }
                else if(numberRegex.IsMatch(part)) {
                    result = Compute(result, operation, int.Parse(part));
                } 
                else if(operationRegex.IsMatch(part)) {
                    operation = part.First();
                }
            }

            return result;
        }

        private (string Result, int PartsIndex, int PartIndex) GetPartInParentheses(int startIndex, List<string> parts)
        {
            var stack = new Stack<char>();
            var result = new StringBuilder();

            for(int i = startIndex; i < parts.Count(); i++){
                var part = parts[i];
                for(int j = 0; j < part.Length; j++) {
                    var c = part[j];
                    if(c == ')' && stack.Count() == 1) {
                        return (result.ToString(), i, j);
                    } else if(c == '(') {
                        stack.Push(c);
                    } else if (c == ')'){
                        char topOfStack = ' ';
                        if(stack.TryPeek(out topOfStack) && topOfStack == '(') {
                            stack.Pop();
                        }else{
                            stack.Push(c);
                        }
                    }
                    if((i == startIndex && j == 0) == false) {
                        if(c == '+' || c == '*') result.Append(' ');
                        result.Append(c);
                        if(c == '+' || c == '*') result.Append(' ');
                    }
                }
            }
            throw new Exception("Oops");
        }

        private long Compute(long left, char operation, long right) {
            switch(operation) {
                default:
                case ' ':
                    return right;
                case '+':
                    return left + right;
                case '*':
                    return left * right;
            }
        }

    }
    class Program
    {
        static void Main(string[] args)
        {
            var calc = new Calculator();
            var tests = new string[] {
                "1 + 2 * 3 + 4 * 5 + 6", // becomes 71
                "1 + (2 * 3) + (4 * (5 + 6))", // becomes 51
                "2 * 3 + (4 * 5)", // becomes 26
                "5 + (8 * 3 + 9 + 3 * 4 * 3)", // becomes 437
                "5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))", // becomes 12240
                "((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2" // becomes 13632
            };
            foreach(var test in tests) {
                Console.WriteLine($"Answer to {test} = {calc.Compute(test)}");
            }

            var calculations = input.Split(Environment.NewLine);
            var answerPart1 = calculations.Select(x => calc.Compute(x)).Sum();
            Console.WriteLine($"Answer part 1 = {answerPart1}");

        }

        private static string input = @"4 * ((9 + 9 * 5 + 5) + 3)
4 + 5 * (3 + 4 * 3 * 8 * 4 + (5 * 4 + 8)) * 6
3 * (6 + (6 * 9 * 9) + (3 + 7 * 9 + 8 * 9) * 3 * 7) + 5 + 2 * (3 + 9 * 9)
((2 + 4) + 7) * (8 * 6 + 9 * (9 + 7 * 3 + 9 + 6) + (8 * 9 + 2 + 8)) * 2 + 9
2 + ((8 + 3 + 6 + 6 * 7 * 8) * 3 * (6 + 4 * 3 + 5 * 8 * 8)) + 2 + (8 * 2 * 3) + (3 * 4 * 5 + 4) + 5
8 * 7 + (3 + 4) + (9 + 3 + 3 + 3 * 6 * 9)
(2 + 3 + 9 + 7 * (2 + 9 + 3 * 9) * (3 * 8 + 9 + 3 + 9 + 5)) * 8 + (2 + 5 + 5) + 9 * 3
6 * 3 * 7 * 7 + (5 * 5)
2 * (7 * 3 * 6 + 7 * (4 * 2 + 7)) * 5 * 3 + 2
6 * 7 + 8 + (6 + (4 * 9 + 9 * 2 * 7) + (9 + 7 + 2))
6 * 5 + 9 * 7 + 7 * (8 + 6 * 8 + (3 + 6 + 2 + 5 + 9 * 8) + 3 + 4)
(6 * 9 + (6 + 5 + 5 + 6)) + 6 + 7 * 4 + 6
9 * (2 * (9 * 8 + 2) * 3 * 6 * 2) + (4 + (5 + 6 + 8 + 8 * 7 + 7) * 5 + 4) * 7 + 2 * 7
(6 + 6 * (2 + 2 + 2) + 8) * (9 * 7 + 7 * 3 * 4) * 5 * 2 * 7
2 * 2 * (3 + 2) + 7 + 2
(9 * 3 + 7) * 5
5 * ((6 * 2) + 3 + 5 * 9 + (8 * 9 + 4 + 3))
3 * (2 * 7 * 4 + 7 + 4) + 9 * 3 + 8
4 + 5 * 6 + (6 * 8 * 5 * 8) + 7 + 4
9 * 2 * (3 + (7 * 7) * 6) * 7 + 4
8 * 4 * (7 + (5 + 4) * 5 + 3 + 5 * 6) + 6
(7 * 3 * 9 + 7 + 4) * (7 + 9 + 7 * 8) * 5 + 2 + 6
((5 * 7 + 9 + 3 + 3 + 8) + (3 + 3 + 5 + 8 + 6 + 9) + 6 + 8 + 4) * (9 + 4 * 9 * 4)
9 * 5 + 2 * (8 * 9)
(8 + 8 + 2 * 5 * 7 + 2) * 6 * 3 + 5 * (7 + 3 * (2 * 2))
((9 * 7) * 7 * 3 + 9 * (3 + 4) + (8 + 8 + 7 + 2 + 6)) + 3
((5 + 2 + 3 * 2) + 9 + 9) + 2
3 * 8 + (2 + 8 + (6 * 5 * 8) + 7 + 5 * (3 * 4 * 5 * 6)) + 5 * 5
8 * 8 + 2 + (9 + (4 * 3 * 6 * 2 + 7 * 7) + 8 + 8 + 8 + 4) + 7
3 + (9 * (8 * 9 * 5) * 8 + 4 + 7 * 8) + 9 * 5 + 3
((5 * 8 + 8 * 2) * (6 * 9 * 4 * 5 + 6 * 7) + 8) * 6 * 2
7 + 5 + 9 * 8 + (2 + 5 + 5 + 4) * 7
7 * 7 * (3 * 3 * (5 + 3 + 2 + 8) + 4 + 5)
(9 + 3) * (9 * 5 + 5 + (6 + 6 + 6 + 5 + 6 + 7) * 4) + 7 + 6 + 5 * 4
(6 + 4 + 3) * 5 * 5
9 * 6 * (6 + (3 * 6 + 9 + 2 * 4 + 6) * (8 * 7) + 8 + 4 * 9) + 3
8 * 9 * 2
5 * ((8 * 6 * 3) * 8 * (9 + 8 + 7 + 4 * 2) * 2 * 6) * 4
(3 + 7) + 4 + (3 + 3 + 5) + 8 * (8 + 6 + (6 * 7 * 7 * 8 * 9 + 4))
3 * (8 + 7 * (3 * 5 + 6 * 7 * 2 + 2)) * 3 + 7 * 8
((5 * 4 + 9 * 7 * 8 + 6) * 4) + 3
2 * 9 * 9 + 4 * (4 * 6 + 9 * (5 * 6) + 6 + 5)
(6 + (7 * 8 * 8 + 7 + 3) + 9 * (3 + 6 + 9 * 8 * 8 + 7) * 6) * 2 * 6
(7 + 5 * 3) * 8 + 6 * (4 * 9)
8 + ((7 + 5 * 3 * 9 + 2 + 2) * (9 * 9 * 6 * 3 * 5)) * 5 + 2 + 4 * 3
7 * 5 * 2 + (9 + 5 + 7 + 4 + 8 + 5) * 3
3 * (3 + 7 + 2 * 8 * 4)
((8 * 5 + 4 * 4) + (6 + 5 * 3 * 5 * 3) * (2 * 7) + (9 + 8 + 3 + 9 + 9 + 6)) * (6 + 9 * 3 + 4 * (7 * 2)) * 5 * 6
(5 + 4 + 4 * (9 * 2 + 8 + 7 * 9) * (2 * 3 + 3 * 6 + 8) * 7) * 9 + 5
9 + 4 + 7 + 6 * 9 + 9
7 + 7 * 5 * (7 * 2 * 2 * 8 + 5) + 6 * 7
5 + (3 * 6 + (7 + 3) * (9 + 5 + 7 + 2 + 6)) * 4
6 * (9 + 7) * 6 * (5 + 6 * 9) + 9 * ((6 * 7) + 7 * 5 + 3 + (9 + 6 + 2 * 5))
6 * 3 + ((7 * 8 + 7 + 3) * (5 + 8 * 9 * 9))
((8 + 9 * 7 + 9 + 5) + (7 + 2) + (5 + 2 + 9 + 9) + 3 + 9) + 9 + 7 * 9
5 + (9 + 6 + 8 * 2 * 3) * 9
(3 * 7 * 5 + (2 + 9) * 3) + 9
6 + 9 + 5 * 9
(5 * 9 + 7) * (9 + 8 * (7 + 7 * 8 + 6 + 3) + 3) * 3 + 7
9 * 9 + 9 * 7 + 9 + 6
((6 * 4 + 8 + 8 + 8) + 9 + (3 * 3 + 2 * 4) + 5) * 9 * 2 * (9 + 7 + (7 * 5) + 9 + 8)
5 * 6 * 3 + 8
4 + 2 * (7 * (4 + 7 * 7 * 2 * 2 * 4) + (7 * 2 * 4 + 8 * 4 * 4) + 3 + 5 + 4) + 5
5 + 8 + (2 + 4) + ((6 + 3 + 4 * 5 + 6) * 4 * 2 + (6 + 5 * 6 + 3 * 4)) * 8
4 + 6 * 6 * (6 + 5 * (4 * 5 * 7 * 3 + 3 + 2) * 8 + 8 * 5)
6 * 2 + 7
7 * 8 + 9
9 + (9 * 6 + 2 + (3 + 2 + 9 * 3)) + 2
7 * 2 * 9 + (2 * 6) + (4 + (6 * 3 * 7 * 7 * 8 + 6) + (2 + 4 + 3 * 2 + 4) * 5) * 2
3 * ((5 * 2) + 8) * 9 + 3 + 2
(9 + 5 * 7 * (9 + 9) * 4 + (4 + 7)) + 7 * (7 + 7 + 3 * 6) * 2 * (5 + 8) + 5
7 * 5 * 6 + 8 + 6 + 7
3 * 8 + 5 * (8 + 8 * 2 + 5 + 5 * 5) * (6 + 2 + (7 + 9 + 9 + 7)) + 2
((2 + 9 + 8 + 4 * 7 + 2) + 2 * 3 * 2 * 9) * 9 + 2 + 6 * ((6 + 8) * 4 * 5 * 3)
4 + 9 + (3 * (3 + 5 * 2 * 6 + 3) + (8 * 7 * 7 + 2)) * 6
(5 + 2 + 4 + 3 * 9 * 3) + 2 * 6
(4 + 9 * 8 * 4 * (6 * 4 + 7 + 4) + (9 * 8 * 4)) * 8
((4 + 3 * 9) * 9 * 5) * 3 * 3
8 * (4 * 5 + (4 * 9 * 8 * 9 + 4 + 9) + 8 * 4 * (4 * 9 + 7 + 2 + 5 + 6)) + 3 * 7 + 3 + 3
2 * 9 * 6 + ((9 + 7 + 2) + (4 + 8) + 9 * (5 * 7 * 2) + 2 + (9 * 4)) * 6
5 + (2 + 6) + 2
7 + (3 * 6 + 2) * (7 + 5 + 6 + (5 * 6 + 7 * 3 + 9 * 9) + 7 * 6)
3 * ((8 * 8 * 5 * 8 * 2) * 3 * (3 + 5)) + 2 + 8
5 * (5 * 6 + 4 * 3 * 2) * (8 * 6 * 5 * 3 + 3 * (5 + 9 + 9 + 7 + 9))
7 + (9 + 5 + 3 * 8 * 2 * 9) * (8 + 7) * 7
3 * 2 + 7 + 7 + (6 + 7) * 8
9 + (7 + 8 * 8 * 5 * 9) * (3 + 5 + (8 + 7 + 2 * 9) + 6 + 5 * 3) * (8 * 7 + 5 * (7 * 3 + 4 * 2)) + 6
(8 * (4 * 7 + 6 * 3 * 6) + 3 * 4 + 8 + 2) * 3 * ((5 * 2 + 8) + 3 + 8) * 3 + 2
7 + 9 * 9 + 9 + ((8 + 7 * 8 * 7 * 3) * 4 + 3 + 3 * 5 * 3)
3 * 8 + (5 * 6 * 7 + 7) + 8
3 + ((5 * 3) * (6 + 6 + 4 * 2 * 3) + 7 + 3 + 2) + 7 * 3 * 9 * 2
(6 + (8 * 2 + 7 + 9 * 3) + (5 + 4 * 9 + 7 * 2 + 7) + 4 + 9 + 3) + 3 + 7
9 * (4 * (2 + 4 * 5 * 2 * 8 * 3) + 6 * 8) * 7
(7 + (9 + 5 * 5 + 6 + 3) * 6 * 3 * 8) * 9 + (5 + 5) * (7 + 3 * 8 + (3 * 7 * 4) + 4) + 9
2 + 6 + 3 + 9 + 6 + (3 * 2 + 3)
(4 + 5 * 6 + 3) * (2 * 5 + (6 + 9) * 4)
6 * 3 * 7 + (8 + 9) + 5 * (3 + 5 * 8 + 5 * 9)
(8 + 6 + 9 + 6 + 7) + 3 * 7
((2 * 7) + 8 * (2 * 4 + 2 + 9)) + (9 * (9 * 2 * 5) + 8) * ((7 + 2 + 3 * 3) + 4) + (5 + 4 + 5 + 8 * 8 + 7) * 9 + 8
((9 + 4 + 2 + 9) + 3 + 8 + (6 * 2 + 2 + 6 * 2 * 6) + 6) * 2
6 + 4 + 3 * 6 + 8
4 * 7 + 5
(3 + (7 + 8 + 7 * 7) * 4) + (9 * 6 * 6 + 9) + ((3 * 3 * 2 * 9 * 3 + 7) + 3 * (5 + 4 + 9 * 8 * 7) + (4 + 7 + 9 + 9) * 8 + 3)
(7 + 7) + 2 * 9
(3 * 3 * 9 + 4) * 4 + 9 + 5
(7 * (5 * 6 * 3 + 8 * 8 * 6) * 4) + (4 * 4) + (9 + 4) + (5 * (7 + 8 + 8)) * 9 * 8
(6 * 2 + 5 * 5 * 5) * (3 * (7 * 9 * 6) + (2 * 7) + 3 + 9) * 6 + 7 * 3
7 + (9 * 2 + 4 + 5 + 2) + 2 * ((7 * 9) + 6 * (9 * 2 + 9 * 8 * 5))
(6 + 4) + 5 * 3 + 6
9 + 2 + 9 * (6 * 7 * 3)
3 * 6 + 8 + (6 * 4 * 9) + 2 * 5
3 * (7 + 2 * 8 + (4 * 7) + 3) + (3 + 4 * 3 * 4 * 7) + 5
7 + 7 + 5 * (2 * 9 * 2) * 8
6 + (9 + 9 + (3 * 8 * 2 + 8) * 4 * 8 + 8)
6 * (3 + (3 + 7) * 8 * (5 + 8) * 7) + 8 + 6
9 + 2 * 3 * 4 + (7 * 3 * (7 * 7 * 6 * 4 + 6) * 6 * (8 + 8 + 9 + 6 * 2 + 4))
2 * 3 + (3 + 6 * 8 + 9 * (5 + 6) + 4)
(2 + (3 + 5 * 7 + 5 + 4)) + 2 * 4 * 4
(3 + 4) + ((4 * 7 + 8) + 8) + 5 * (9 + 5 * (4 * 8 + 9 + 6 * 8)) + 8
(7 + 5 + 2 * 2 * 6 * 2) * (4 * (5 + 7 + 9 + 4 * 2 * 6) + 2 * 3 + (8 + 8 * 2 * 2 * 3))
5 + (3 * 2 * 9 + 4) + 8 + 9 + 2
5 + 3 + ((6 * 3) * 3 * 5 + 4 * (7 + 8 + 3 + 3))
9 * ((9 + 9 + 7 + 5 + 7 * 9) * 5 * 9 * 4)
8 + (2 * 2 * 2) * 4
3 + ((8 * 9 + 3 * 3 * 3) + 6 * 8 * (4 * 6 + 7 + 6) + (8 + 2 * 6 + 4 + 7) + 7) + 3 + 8
(6 * (4 * 4) * 4) + 3
(6 + 5 + 9 * 8 * 4 * 6) + (5 + 6 * 4 * 5) + 6 + (5 * 4 + 8 * 9)
((8 + 8 + 5 * 6 * 4 + 6) * (2 + 8 + 6 + 3 + 5) * (6 * 7) + (8 * 2 * 2 * 3 + 7 + 5) + 7 * 7) + 3 + 8 * 4 * 5 + 3
2 + (4 * 9 + (4 * 2 + 3) + 9 * 3) + 5 * 7 * 8 * 2
8 + 3 + (2 + 5 * 2 * 7 * 3 * 2) + 7 + 6
5 * 2 * ((4 * 8 * 7 * 7) * 7 + 9 * (4 + 9 + 8 * 6) * 2 + 2) + 7 * 6 * 4
3 + 8 * 7 * (9 * 5 + 8 * 2 * 5 * (6 * 3 + 9))
8 + 9 + ((5 * 7 + 2 + 4 * 5) * (6 * 7 * 8) + 4 + 3 * 2) * 7 + (6 * (3 + 8 + 5 * 5 + 5 * 2) * 5 + 8)
4 + (3 + 6 + 3) + 4 + 2 * 9
(5 + 5) + 8 * 6 + (5 + 5)
7 * 8 * 2 + 2 * ((4 + 9 + 6 * 9 + 9 + 2) * (8 * 2 * 3 + 3 + 2 * 4) + 8 + (4 * 6 + 8) * 4 + (4 * 8 + 2 + 4))
5 * 9 + 7 * 9 + (2 * 7 * (6 * 5) + 7 + 6) * 7
4 + 9 + 8 * ((8 + 4 + 7 * 8) * 8) + 4 + 9
4 * (2 + 3) * (7 + 7 * (5 + 2 + 8) + 2)
(3 + (3 * 7 + 7) * 3) + 6 * 9 + 2 + 6 + 3
(3 + (2 * 5 + 6 * 4) + 3) + ((2 * 2 + 8 + 7 * 5 + 5) * 8 + 5 + (9 * 4)) * 8
4 * 7 * 6 + 9
(6 * 7) + 6 + 3 + 3 * 3
8 + 7 * 9 + 9 + 3 + (7 * 3 * 3 * 7)
8 * 7 * 4
6 + 3 + (3 + 3 + 8 * (2 + 4 * 8 + 3))
9 * 7 * (5 * 3 + (8 * 2) + 3) * 4 * 5 + 4
(3 * 3 * (3 + 4 + 4 * 8)) * (5 + (9 + 9) + 2 + 3 * (9 + 4 + 6 + 3)) + 6 * 7
(6 + (6 * 7 * 3) + 2 + (2 + 4 * 9 + 9)) + 5 * 9 + (7 + 2 + 3 * 9 * 9)
2 * 9 * 7 * 8
4 + 5 + 2 + 6 + (4 + 7 + 3 * 6 + 2)
(9 + 4 + 8) + (2 * 3 + 5 + 3) + 3
6 * ((6 + 3 + 6 * 6 * 2 + 3) + (5 + 4 * 9 * 8 * 4 + 2) * (2 * 4 * 5) + 3) + 9 * 2 + ((6 * 9 + 6) + 3) + 5
(6 + (7 * 8) + 8) * 2 + 2 + 5 + (3 + 2 * 8)
(4 * 5 * 5 * 9 + 4 + (5 * 5 * 7 * 2 * 5 + 8)) + 8
3 + 4 + 5 + (7 * 8 + (8 * 7 * 4) + 5 * 8 + (8 + 5 + 8 + 9 * 7 * 2)) * 7
4 * 7 + 2 + 8 * ((4 + 7 * 3) + 7 + 2 + 9 + 8) + 5
9 + 3
6 + 5 + (3 + 3 * 3 * 3) + 4 * 2
((9 * 4 * 6 + 4 * 6) + 4 * (9 * 8 * 6) + 4 * (9 * 4 + 8 * 7 * 3 + 3) * 4) + 7 + 9
2 + (6 + 9 + 6 * 6 * 4 * 2) * 4 * 2 * 7
4 + 2 * ((8 * 4) + 2) + 2 + 2
4 + (2 + 8 * 3 + 2)
6 + 3 * (7 + 6 + 4 * 3 * 5 * (3 + 9 + 9)) * 5 + 8
(5 * 2 + 9 * (5 + 8 + 8) * 4 * (8 * 2 + 6 * 8 * 2 + 2)) + 7 * ((5 * 7 * 8 + 4) * 8 + (7 + 9 + 4 + 5 * 6))
5 + 3 + (4 * 7 * 6) * 7 * 3
(6 + 9 + 7) * 5 + (2 * 4) + 7
5 * (5 * 5 * 9 + 9 * 8 * 5)
(4 + (7 * 9 + 5 + 6) * 8 + 5) * 2 * (7 * 9) + (6 + 5) * 4
(3 * (8 * 9 * 8) * 3 * (8 + 7 + 8 + 5 * 7)) + ((7 + 9 * 2 * 6) + 2 * 5) + 4 * 2 + 4
5 * ((2 + 9 + 3 * 5 * 4) + 9) * 4
8 + ((5 * 5 + 9 + 4) + 2 * 4 * (8 + 2 + 2 * 3 + 5 + 3) * 5) + (6 * 9 + 9 + (3 * 8)) + 4 * 8
(2 * (6 + 3 * 6 + 5) * 7 + 5 + 5) * 3
8 + 6 * (9 + (5 + 5 + 7) * 8 + 5 * (2 * 4 + 7 + 4 * 3 + 9) * (9 * 7 + 3 * 5 * 7)) + 2 + (2 + 5 + 8 + 8 + (2 * 9) * (5 + 8))
5 + ((5 + 6 + 8) * (9 * 7 * 5 * 6 * 8 * 7)) + 4 * 3 * 7 + 7
2 * (3 + 4 + 6 + 2) + (7 * 8) * (3 * 5 * 9 * 5 * 9 * 8) * (7 + 3 + 2 + 7 * (7 + 2 * 9 * 2 + 3 * 4) + 8) * 9
(7 * 7) + 2 * 5 * 2 * 8 + 8
7 * (9 + 3 + 9 + 9) * 7
9 + (7 + 3 * (6 * 5 * 4 * 7)) + ((3 * 3 + 3 + 6 + 4) + 8) * 6
(5 + 2 + 5 + (6 + 2 * 6 + 9 * 6 + 9) + 8) * 9 * (4 * 8 + 5 * 2 + 6) * 8 * 6
4 + 6 * 9 * 9 + ((4 * 8 + 3 * 8 + 2) * 3 + 3) + 6
(3 * 8 * 5 * 4 + 6 * 2) * 8
4 + ((7 * 9 * 3 + 5 * 5) + 2 + 6 * (6 * 8)) + 4 * (5 * (5 * 7 * 7 * 8))
5 + (9 + 2 + 4 * 8 + 5) + 2 * 5 * 5 + (2 + 6)
(3 * (6 * 5 + 9 + 7 + 3) * 9) * 6 * 2 + 7
8 * 6 * 7 + 8 + (5 * (9 + 6 * 5 + 3 * 7) + 6 + 6 * 7) + (9 * 4 + 9 * (6 + 7 + 6))
3 * 8 * 9 + 3 + 2
(7 + (9 + 7 * 8 * 4) * 2 * 6 + 8 + 5) + 3
8 + 9 * (2 * 8 + (7 * 9 + 8 + 4 * 2) * (5 * 6) * (4 + 4 + 6 + 4 * 3 + 8))
(2 + 8 + 3 + (6 + 7 * 4) * 5 * 9) * (4 * 8 * 9)
3 * 3 * 6 + 3 * (8 + 9 * 9 * 5 * 5 + 2) + 6
9 * (5 * 8 * 3 * 3 + 9 * (7 + 6)) + 7
6 * 5 + 5 * ((9 + 3 + 7 * 7 + 9) + (5 + 6 + 2 + 5 + 8) * 4 * 7) + 6 * 6
8 + (3 * 8) * 5 + 3
(2 + 9 + (6 * 2)) * 7 * (8 * (7 * 2 + 8) + 3 + 3 + 3) * (7 + (2 * 6 + 2 * 6 * 5) + 5 * 7 + 5)
5 + ((9 * 8) + 6 * 5 * 9 * 4)
9 + (7 + 7 * 7 + (7 * 9 + 6 * 3)) + 9 * 4 + 7 * 3
(4 * 7 + 7 * 8 + 2 + 7) + (3 * 3) + 6 + 3
((3 * 9 + 4 * 6 * 2) + (2 * 9 + 4 * 9) + 5 * 6) * 3
5 + 4 * 7 + (4 * 4 * 9 * 3 * 9 + (2 * 4 * 8 * 8 * 5 * 4)) * 7
7 * (5 + (6 + 7 * 6 + 9) * 8 * 5 + 7)
4 + (7 * 7 * (3 * 4 + 7 * 8) + 6 + 8) + 4 * 8 * 9
7 + (9 + 8 * 5 + 6) + (6 + 6 + 3 * 4)
(3 + 5 * 2 * 5) * (6 * 2)
(6 + 9 * 3) + (6 + 7 * 9 * 3 * 5 * 3) * 8 + (6 * 3 * 7 * 4 + (5 * 6 + 3 * 4 * 2) + 4) + 4 * 5
(5 * 4 + (2 + 8 * 2 + 5 + 5) + 8 + 4) * 9 + (3 + 5 + 3 * 7) + 3 + 6
(4 + 4 + 7 * 2) + 2
5 * ((6 + 6 + 8 + 8) + 6 + 3) * 4
(4 * 4 * 4 + 4) + 7 + (5 * 9)
4 * 4 * (3 + 2 + 4 + 2 * 6) * ((9 * 6 * 8 + 6) + (3 + 7 + 4 * 3 + 5) * 7 + 4 + 4 + 7) * 5
(6 * 8 + 2) + (6 + 2 * 3) + 3 + 6
9 * 8 + (7 + (6 + 2) * 2 * (3 + 4) * 2 + (3 * 4 * 7 + 3 * 2)) + 4
2 + 3 * ((5 * 5 * 2 * 6 * 8) + 9 * 5 * 2 + 8) * 6 * 6 + (2 * 9 * 8 + 5)
4 + 6 + 3 * (4 * 2 + 4 * 6 + 5)
(4 * 4 + (4 + 7)) * 3 * ((3 + 6 * 9) + (5 + 8) + 2 * (7 * 8 + 7)) + 7 * 6 * 3
(4 + 9 * (5 * 4 + 6 + 9) * 5 + 6) + (2 * 7 * 6) * ((8 * 7 + 6) * 8)
(3 * 8 * 7) * 6 + ((3 * 8 + 6 * 3) * (4 * 7) * 6 * 2 + 7) + 7
2 * (9 * 9 * 4 + (7 * 4 + 6 * 2 * 2 * 5)) * 8 + 6
2 + (2 + 7 * 8 * 8 + 9 + 4) * 5 + 6 + 3 * 5
6 + 4 + (9 + (7 + 7 * 5) * 9) * 3
7 * (6 + 2 * 7 * 8) * 6 + 4 + 8 + 7
(6 * (9 * 8 * 7 * 6 * 3 * 9) * (9 * 9)) * 3 + 7
6 + ((2 + 5 + 5 + 2 + 3) + 5 + 4 + 2 * 4)
9 * 8 * (5 * 8 * (3 * 9 + 7 + 5 + 3) * (7 * 9 * 3 + 8 * 2 * 5))
4 * 3 + 7 * 3 * 4 + 2
5 * 7 * (7 * 5 * 2) + 3
6 * 8 + 6 * (6 + (3 + 4) * 6 + 7) + 7
(3 + 8 * 7 + 8) + ((9 * 3 * 4 + 8) + 8 + 3) + 5 * 7 * 7 + 6
((2 * 4 * 4) * (7 * 9 + 2 + 8 * 7)) * 7 + 2 + 6 + 6 * 5
3 + (6 * 6 + 3) * ((6 + 6 + 5 * 4 * 7) * 2 * 9 * 8 + 9)
(2 + 2 + 7 + (9 * 2 + 9 * 4) + 5) * 8
(3 * (6 * 9 * 6 * 5 + 3 * 4) * 7 + 2) * (3 * 6 + (4 * 3 * 4 + 3 * 9) * 2 + 8) * 6
5 * 8 * (6 + 6)
4 + 6 + (7 * 9 + 4 + (5 * 8 + 2)) + 7
9 * 2 + (5 + (5 * 4 * 2 + 8 * 5 + 3) * (4 * 3 + 9)) + 8 * ((6 + 6 + 2 * 8) + 3) + 7
3 + 8 * 5 * 2 * (5 + 9 * 4 * 9)
6 * 3 * 2 * 4 * ((2 + 6 + 7) + 4 * 6 * 7) * 4
3 + (9 + (9 + 6) * 9) + 9
((8 * 4) + 9 + 4) + 7 * 3 * 3
(2 * 8) + 6 * 7 + 7 * 9 + (7 * 7)
7 + (4 * 9 * (9 * 5) * 8) + (8 * (5 + 8 + 4 + 7 * 4 * 5))
4 * 9 * 4 + 2 * 8
(4 + 9 * (3 * 7 * 2 * 6 * 2 + 4) + (9 * 7 + 6) + 4) * 4 + (6 + (5 * 2 * 5 * 7 * 8 * 2) * 9 + 7)
(2 * 4) * 8
6 * (2 * 8 * 5 + (7 * 3 + 6) * 8) + 7 * 5
(6 + 6 + 3 + 4 + 3 + 3) + 7 + 3 * 6
(5 * 8 * 3 + (6 * 5 + 5 + 2 + 5) + 2) * 4 + 4 * (4 * (6 + 6 * 8)) + 5
8 + 3 + (2 * 6 + (2 * 9 + 5) * 3 * 9 + 5) * 4
7 + 4 + 4 * (4 + 3 * 6 + 3) + 5
7 + (2 * (2 * 2) + 5 * 2)
(2 + 9) + 6 * 8 + (9 * 8 + 2 + (4 * 2 + 5 + 4 + 8 * 5) * 4 * 7) + 8
(5 * 9 + (3 * 9 * 6) * (9 + 2 * 8 + 9) + 8) + 2 + 8 * 6 * 4
6 * 9 + 9 + (7 * (7 + 4 + 3) + 3 + 9 + 5 * 4) + 8 + 7
9 + 9 + ((2 * 4 + 3) + 7 * 5 * 8 * 5 + 7)
(3 + 5 + 2 + 4 * (4 + 8)) * 7
3 + (5 * 7 + (2 + 5 + 4 * 2 * 5) + 8)
9 + 4 * 9 + 6 * (9 * 9 + (7 * 7 * 5 * 4)) * (7 + (8 + 4 + 9 + 5) + (8 * 9 * 2 + 5 * 4 * 9) * 5 + 9 * 7)
(3 * 3 + 3) + 7 + 5 * 3
8 + 5 * 5 + ((3 * 8) + 8) + 6
7 * 4 * (5 * 2) * (6 * 9) + 6
7 * (6 * 6 * 9 + 7) * 2 * 6
8 + ((2 + 7 + 2 + 2 * 9) * 8 + 3 + (5 + 4) * 6) * 5 + 3
((2 * 8 * 7 * 3 * 9) + 9) * 3 * 8 + 2 + 3 * 8
(5 + 7 + 3 * (7 + 4 + 5 * 6 + 6 + 3)) * 8 * 6 * (5 + 7) + 4 * (3 * 3)
((3 * 4 + 9 + 2) + 8 + 8 * 7 + 4) * 7 + 4
(9 + 3 * (5 + 5 + 8 + 5 * 6 + 7) + 7 * 9 * 4) + (3 * 6 + 8 * 7 * 6 * (3 * 8 * 2 * 8 * 7 + 5))
(4 * 6 * 7 + 3 + 7) + (3 * (7 * 3)) * 6
2 * 7 * 2 * 2
6 * 7 * (7 * 3 + (4 * 3 + 4) * (3 + 5 + 9 * 4 * 8) + 2) + 7 * 3 * 2
5 + (2 * 4 * 4 + 4 + (4 * 8 + 9 + 3 + 4) * 9)
(8 * 5 + 8 * 7 + (5 + 5) + 5) * (7 + 4 + 5) * (4 + 8 + 2 * 6)
6 * (5 * 5 * 5 * 3 * 6) + 2 + 2
(7 * 2 * 5 * (9 + 7 + 4) * 5) * 2
5 + 7 * 5 * ((9 * 7 * 3 * 3 + 6) + 2)
3 + 9 + 9 * 7 * 6 * 8
7 * 7 + (5 + 7 * 6 * (3 + 4) + 4)
(7 * 7 + 8 * 2 * (6 + 8 + 7 * 2 + 8 + 5) * 4) + 2 * ((9 + 6) + 6 + 4 + 8 + 6 + 8) * 4 + 7
4 * 8 + 7 * 4 * (5 + 5 * 4)
8 + (7 * 4 + (4 * 9 * 5 * 4 * 2 * 9)) * 9 * (6 + 8)
9 + (8 + 4 + 6 * 6 + 7) + (4 + 2 + 2 + (7 + 5 * 7 * 7 + 9 * 6)) + (2 * 9 * 5 * 6) * 8
(8 + 4) + 5 * 9 + (6 + 6 * 2 * 4) + ((7 + 7 * 8) * 7 + (7 * 5 * 9) + 2) * 7
5 * 6
9 + (9 + 7 + 6 + 5 * 5 + 8) + 3 + 9 * (9 + 9) + 7
(7 * 4 * 5 * 8 + 4 + 5) + 3 * (9 + 3 * 3 + 4 * 2) + 4 * 3
3 + 3 * 2 * 6 + 2
7 + 6 * 6 * 9 + (7 + 7 + 4 + 8 * (3 + 9))
4 * ((2 + 7 * 5 + 6) + 8 + 5 + 7 * 7) * 8
(6 * 9 * (7 * 3 + 8 + 3 * 3) + 4 * 6 * 4) * 3 * 6 + 9 + 3 + 6
5 * 4 + 7 * (2 * 3) + (8 * 2 + 5) * 7
2 * 7 * 8 * (4 + 3 + 4 + 6)
7 + 7 + (4 + (2 * 8 + 9) + 2 + 5) * 8 + 2
(6 + (2 + 9 * 4 * 8) * 5 * (4 * 5 + 6 + 2) * 6) + (6 * 6 + 7 * 9) + 4 * 3
7 + 5
3 * 2 + 2 * 8 * (2 * 2 * 4 + 5 * 2 * 5) + ((8 * 8 + 6 + 4 * 4 * 5) * 3 + 6 + 8)
8 + ((8 * 5) + (6 + 7) + 8 + 7 * (5 + 8)) + 5
5 + (4 * 6)
5 * 2 + 3 + ((7 + 5 + 5 * 5 * 7) * (2 * 8 + 9)) + 6
(3 * 8 * 5 + (6 * 4 + 4 * 8) + 8) * 6 + (3 * 7 * 6 + 4 * 8) * 3 * (8 + 8 + 5)
7 + 8 + 2 * (8 * 6) * 6
3 * (9 * (3 + 7)) * (7 + (4 * 6) + 8 + 8 + 4 * 9) + (3 * 4 + (6 + 8 + 2 + 7 + 7) * 3 * 7)
(6 * (9 + 4 + 9) + (8 + 9 + 9)) + 7 * 8 * 8 + ((9 + 5 + 7 * 2) + 8 + 6 * 4) * 9
7 + (9 + (5 * 6 + 2 * 9) * 2) + 2
(9 + 3 * 2 * 8 + 7 + 8) * 2 * (2 + 2)
7 + 4 + (7 * 7 * 6 + 3 + (4 + 5)) * 9
9 * 5 + (3 * 7 * 4 + 6 * (2 + 2 * 4 + 3 + 3) + (7 * 4 * 5)) + (8 + (9 + 5) * 6) + 3
8 * 8 + 6 + 2 + (8 + 7 + 2 + 3 * 5) * 8
9 + 8 + 8 + (9 * 2 * 9 * 9 * (7 + 6 * 7))
7 * (8 + (5 + 5 * 8 * 3 + 4) + 2 + 4 * 6 + 4) + 8 * 9
9 + 3 * ((8 + 9) * 4 + 8 + 3) * (8 + 7) * (9 + 2 * 5 + (5 + 4 * 2 * 7 + 9 + 8))
8 * 7
(5 + (9 * 5 * 9) * 6 * 4 * (4 * 6) * (6 + 8 + 7 * 5)) * 4 + 6 * 9
7 + 5 * 2 + (4 + 5) + 6 + (9 * 4)
3 * 5 + (5 + 9 + 8)
((2 * 6) + 2) + 4 * 9
3 + 8 * ((2 * 6 + 6) * (9 * 8 + 8) + (6 + 6 * 6 * 5)) + 5 + 4
(4 + (2 + 4) + 6 + 9) * (5 * 2 * 2) * 9 + 6 * (5 * (7 * 4 * 8 + 3 + 9) * 2 + 3 * (2 + 4 + 8 * 9))
6 * (6 + 5 * 4 * 9 + 9 + (3 * 2 + 3)) + 6 + 7
3 * (4 + 4) + 4 * 5 + 6
(8 * 6 * 3 + 7 * 7) + 3
(4 * 6 * 7 * 8 + (8 * 7 + 9 * 5 * 7) + (8 + 7)) * 7 * 7
5 + 8 + 5 * 4 + 3 * ((5 * 9 + 9) * 2 + 3 + 2 + 2 * (2 * 3 + 8 + 5 * 6 + 6))
(8 * 5 + 3 * (8 + 9 * 4 * 5 + 9) * 4 + 9) * 2 + 7 + 3 + 7 + 9
4 + ((8 * 4 + 5 + 7 + 2 * 6) * (7 + 2) + (6 + 2 + 2 * 4 * 7 + 4) + 5) * 9 + 7 * (8 * 4 + (3 + 5) + 7 * 2)
8 * (8 * (5 * 6 * 8) + 9 * 9 * 4) * 3
7 * (9 + 5 * (5 + 5 + 7 * 7) + 4)
8 + 4 + 9 + 5 * (9 + (7 + 2 + 9) * 3 + 3 * 7) + (7 * 7)
4 * 2 + 7 * (7 * 7 * 9 + (6 + 2 + 8 + 7) + 4 * 2) + (5 * 7)
4 * ((5 + 9 * 5 * 6 * 9) * 3) * 8 * (4 + (7 * 7 * 9 * 6))
9 + 9 * 9 * (4 * 6 * 4 * 7 + 7) + ((5 * 9 + 4 * 4 + 2 + 4) * 7 * 6 * 5) + 8
4 + 4 * (4 * 5 * (6 + 9) * 5 * 5 + 2) + (4 * (8 * 2 * 9 + 8) + 2 * 9) * 3 + 2
3 * 7 + 3 * ((3 + 2 * 9 * 5 + 5) + (3 + 5 * 7 + 2 + 6) * (5 * 8 * 8 + 7 + 8 + 4)) * 4 + 3
(2 * 5 * 4 + 3) * 5 + 8 * 4 + 7 * 4
5 * 3 + 3 * 4 * 7 + (6 + 4 + 8 * 7 + 4)
2 + 2 + (7 + 2 + (9 * 7 + 6 + 4 * 2)) + 9 * ((9 * 4 + 4) * 6 * 8 * 5 * 6)
8 + 2
8 + 3 + 4 + ((5 + 3 + 7) * 3 + 4 + 4) + 8
9 + 9 + 2 + (2 * (5 + 4 * 2 + 4)) + (2 + 6 * 2)
2 + (5 + 5 * 6)
2 * 9 + 4 * ((9 * 3 * 2 * 7 * 7) * 8 * 6 + 4)
4 + 5 + 9 + (8 + 6 + 3) + (6 + 9 + 4 + 5) * 2
4 + 3 * 7 + ((3 + 3) * 6 + (4 * 6 * 3 + 9 * 6)) + 8 * 2
7 + 7 + ((4 * 8 + 8) * 7 * 3 * 5 + 3 * 2) + 2 + 8
(7 + 5 * 2 + 8 * (5 * 3 * 4 * 4 + 7 * 5)) * ((3 * 3 + 8) * (4 + 9)) * 7
6 * 9 + 5 * 7 * 7
4 * 2 + (4 + 6 + 3 * 3) * 2 + (9 * 6) + 9
3 + 6 + (3 * 8 * (6 + 3 + 4 * 7) + 4 + (7 * 8))
7 * 4 + 5 + 6 * 7 * (8 * 4 + (4 * 6 * 5 + 4))
8 + 7 + 2 + ((5 + 2) + 5 + 7 * 6 + (7 + 8 + 7 + 6 * 8 + 7) * (4 + 2 + 3 * 2 * 9))
3 + ((7 * 6 * 2 * 9 + 3) * (7 * 8) * 2 * (3 * 5 + 8 * 3)) + 8 * 7 * 9 + 9
2 + ((3 * 8 + 5 * 6) * 4) + 8 * 6 * (2 * 7 + 5 + 5 * (9 * 4 * 9)) * (4 + (2 * 6 * 5))
(7 + 7 * (8 + 7) * (2 + 4 + 8 + 5 * 9 + 5)) * 7 + (4 * 2 + (7 + 8 * 4) + 9 * 3 + 4) * (7 * 7 + 2 + 7 + (8 + 8) + 9)
(5 + 3) + 8 * (8 * 3 * 2 * 5) + 2 * 3 + 3
((9 * 5 + 6 + 3 * 9) * (8 + 3 * 4 + 2 + 9 + 9) + 3) + 4 * 5 * 7 * (7 * (8 * 4 + 7)) + 6
7 + 9 + 3 + (3 + (7 + 4 * 7 * 7) + (5 + 7) * 8 * (7 + 5 * 3 + 7 * 8))
9 * (5 + 6 + 4 * (7 + 9 * 7 * 4) + 9) + (6 * 7) * (3 + 5 * (6 + 9 + 7)) + 8 * (5 * (2 + 3 + 6 + 8 * 8 * 9))
2 * 6 + (3 + (6 * 3 * 6 + 2 * 8 + 5) * (5 + 7 * 8 * 4 + 4 + 7) * 2 * 8 + 3)
6 + (7 * (3 + 2)) * 8 * 6
8 * 7 * (8 * 7 * 8 + (4 + 4 + 4 + 3) + 4 * 8) + 7
5 + 4 + (8 + 3 + 7 * 9 + 6 * 4) * (3 * 4 + 3 * 4 + 5) * 7 * 7
6 * ((5 * 6 * 7) * (8 * 2 + 2 * 6 * 6 * 3) * (5 + 2) * 5 * (8 + 7 + 3)) * 3 * 7 * 9 * 6
3 * 2 + (6 * 3 * 5 + 3) + 6 * 9 * 3
(5 + 9 + (8 * 5 * 6 + 2 + 4 + 2)) + 9 * 9 + (7 + 9 * 7 * (8 * 6) + 2 + 5) + (9 + 4 * 7) * ((8 + 9 + 9 + 4) + (3 * 6) + 8 * 8 + (2 + 6))
7 + 6 * (3 + 7) * 2
(2 * 5 + 9 + 7 * 9) * 7 + 3 * 9 * 2
((5 + 2 + 9 * 9 + 3 * 2) + 7 + 8 * 8) * 4 + (4 + 9 + 5 * 6 * 2 * (2 * 4 * 4 + 2)) + 9 + (9 + 4 * (8 * 7 * 8 * 3) * 8 * (2 * 9))
(6 * 4 * 4) + 6 + 5 * 3 * 2
(7 * 7) + 3 + ((4 * 8 + 3) * 2) + 5 + 5 * 3
(3 + (8 + 6 * 4 + 7 * 7)) + (5 * 2 + (6 + 2 * 4 + 5) * 8) + ((6 * 4) * (3 + 8 + 8 * 6 + 8 + 4) + 6)
9 * 3 + (8 * 2 * 8 + 6 * 7) * 5
9 + 6 + (4 * 9) + ((2 + 2 + 7 + 2 * 6) * 3 * (2 * 6 + 9 * 4))
6 * 8 + (3 * 3 + 9 + 4 * 3)
2 * (4 + 2) * 8 + (2 * (6 * 6 * 9 * 5 * 6 + 8))
6 * ((8 + 5 + 5 + 2 + 5) * 2 * (9 * 4 * 2 * 5 + 2 + 9)) + 3 * 3 * 7 + 4
(6 * 7 + (8 * 7) + (8 * 7) * (9 + 6 + 9 + 2) + 6) + 7 * (8 + 7) + 7 + 6
8 + 9 + (6 * 6 * 7 + 9 + 7) * (7 * (9 * 7 * 5 + 8) * 5 * (7 * 3) + 6 + 3) * ((5 + 5 * 7 * 7 * 5 * 9) + 9 * 6 + 5)
2 * 9 + ((9 + 3) + 9 * (3 + 9 * 8 * 8 + 7 * 8) + 8 * 9) * 6 + 4 + 8";
    }
}
